#!/bin/sh

# GridTokenX Pre-commit Quality Hook
# This script runs essential quality checks before allowing commits

set -e

echo "🔍 Running pre-commit quality checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Track if any checks failed
FAILED=0

# Function to run a check and track failures
run_check() {
    local check_name="$1"
    local command="$2"
    
    echo "Checking: $check_name"
    
    if eval "$command" > /dev/null 2>&1; then
        print_success "$check_name passed"
        return 0
    else
        print_error "$check_name failed"
        FAILED=1
        return 1
    fi
}

# 1. Code formatting check
echo ""
echo "1. Code Formatting"
echo "=================="
if ! run_check "Rust formatting" "cargo fmt -- --check"; then
    print_warning "Run 'cargo fmt' to fix formatting issues"
fi

# 2. Clippy linting
echo ""
echo "2. Code Linting"
echo "==============="
if ! run_check "Clippy lints" "cargo clippy -- -D warnings"; then
    print_warning "Fix clippy warnings before committing"
fi

# 3. Unit tests (fast subset)
echo ""
echo "3. Unit Tests"
echo "============="
if ! run_check "Unit tests" "cargo test --lib --quiet"; then
    print_warning "Fix failing unit tests before committing"
fi

# 4. Build check
echo ""
echo "4. Build Verification"
echo "===================="
if ! run_check "Build check" "cargo check --all-targets"; then
    print_warning "Fix compilation errors before committing"
fi

# 5. Security audit (if tools available)
echo ""
echo "5. Security Check"
echo "================="
if command -v cargo-audit >/dev/null 2>&1; then
    if ! run_check "Security audit" "cargo audit"; then
        print_warning "Address security vulnerabilities before committing"
    fi
else
    print_warning "cargo-audit not installed - skipping security check"
    print_warning "Install with: cargo install cargo-audit"
fi

# 6. Check for debugging code
echo ""
echo "6. Code Quality"
echo "==============="
if git diff --cached --name-only | grep -q '\.rs$'; then
    # Check for common debugging artifacts
    if git diff --cached | grep -E '(println!|dbg!|todo!|unimplemented!)' >/dev/null; then
        print_error "Found debugging code in staged changes"
        echo "Remove println!, dbg!, todo!, or unimplemented! macros"
        FAILED=1
    else
        print_success "No debugging code found"
    fi
    
    # Check for TODO/FIXME comments in new code
    if git diff --cached | grep -E '(TODO|FIXME|XXX)' >/dev/null; then
        print_warning "Found TODO/FIXME comments in staged changes"
        echo "Consider addressing these before committing"
    fi
else
    print_warning "No Rust files in staged changes"
fi

# 7. Documentation check
echo ""
echo "7. Documentation"
echo "================"
if ! run_check "Documentation build" "cargo doc --no-deps --quiet"; then
    print_warning "Fix documentation errors before committing"
fi

# Summary
echo ""
echo "========================================="
if [ $FAILED -eq 0 ]; then
    print_success "All pre-commit checks passed! 🎉"
    echo ""
    echo "Ready to commit. Summary:"
    echo "• Code formatting: ✅"
    echo "• Linting: ✅"
    echo "• Unit tests: ✅"
    echo "• Build: ✅"
    echo "• Security: ✅"
    echo "• Documentation: ✅"
    exit 0
else
    print_error "Some pre-commit checks failed!"
    echo ""
    echo "Please fix the issues above before committing."
    echo ""
    echo "Quick fixes:"
    echo "• Format code: cargo fmt"
    echo "• Fix lints: cargo clippy --fix"
    echo "• Run tests: cargo test"
    echo ""
    echo "For more detailed analysis, run: ./qa-check.sh --verbose"
    exit 1
fi
