# GridTokenX Production Docker Compose
# Version: 0.1.1 - Updated August 2025
# Production-ready deployment with full authority node setup

services:
  # EGAT Authority Node (Primary Bootstrap)
  egat-node:
    image: gridtokenx-blockchain:latest
    container_name: gridtokenx-egat-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9000:9000"
      - "9090:9090"
    volumes:
      - egat_prod_data:/app/data
      - ./config/egat.toml:/app/config.toml
      - ./logs/egat:/app/logs
    environment:
      - RUST_LOG=info
      - GRIDTOKEN_AUTHORITY_TYPE=EGAT
      - GRIDTOKEN_NETWORK_ID=gridtokenx-mainnet
      - GRIDTOKEN_PRODUCTION=true
    networks:
      - gridtoken-prod
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MEA Authority Nodes (Scalable)
  mea-node:
    image: gridtokenx-blockchain:latest
    restart: unless-stopped
    expose:
      - "8080"
      - "9000"
      - "9090"
    volumes:
      - ./config/mea.toml:/app/config.toml
      - ./logs/mea:/app/logs
    environment:
      - RUST_LOG=info
      - GRIDTOKEN_AUTHORITY_TYPE=MEA
      - GRIDTOKEN_NETWORK_ID=gridtokenx-mainnet
      - GRIDTOKEN_BOOTSTRAP_PEERS=egat-node:9000
      - GRIDTOKEN_PRODUCTION=true
    depends_on:
      egat-node:
        condition: service_healthy
    networks:
      - gridtoken-prod
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G

  # PEA Authority Nodes (Scalable)
  pea-node:
    image: gridtokenx-blockchain:latest
    restart: unless-stopped
    expose:
      - "8080"
      - "9000"
      - "9090"
    volumes:
      - ./config/pea.toml:/app/config.toml
      - ./logs/pea:/app/logs
    environment:
      - RUST_LOG=info
      - GRIDTOKEN_AUTHORITY_TYPE=PEA
      - GRIDTOKEN_NETWORK_ID=gridtokenx-mainnet
      - GRIDTOKEN_BOOTSTRAP_PEERS=egat-node:9000
      - GRIDTOKEN_PRODUCTION=true
    depends_on:
      egat-node:
        condition: service_healthy
    networks:
      - gridtoken-prod
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G

  # ERC Regulatory Node
  erc-node:
    image: gridtokenx-blockchain:latest
    container_name: gridtokenx-erc-prod
    restart: unless-stopped
    ports:
      - "8083:8080"
      - "9003:9000"
      - "9093:9090"
    volumes:
      - erc_prod_data:/app/data
      - ./config/erc.toml:/app/config.toml
      - ./logs/erc:/app/logs
    environment:
      - RUST_LOG=info
      - GRIDTOKEN_AUTHORITY_TYPE=ERC
      - GRIDTOKEN_NETWORK_ID=gridtokenx-mainnet
      - GRIDTOKEN_BOOTSTRAP_PEERS=egat-node:9000
      - GRIDTOKEN_PRODUCTION=true
    depends_on:
      egat-node:
        condition: service_healthy
    networks:
      - gridtoken-prod
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Production Load Balancer
  nginx-lb:
    image: nginx:alpine
    container_name: gridtokenx-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - egat-node
      - mea-node
      - pea-node
      - erc-node
    networks:
      - gridtoken-prod

  # Production Monitoring
  prometheus-prod:
    image: prom/prometheus:latest
    container_name: gridtoken-prometheus-prod
    restart: unless-stopped
    ports:
      - "9095:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
      - ./logs/prometheus:/var/log/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - gridtoken-prod

  grafana-prod:
    image: grafana/grafana:latest
    container_name: gridtoken-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources
      - ./logs/grafana:/var/log/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-gridtoken123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus-prod
    networks:
      - gridtoken-prod

networks:
  gridtoken-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  egat_prod_data:
    driver: local
  erc_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
